"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/dashboard/charts/page",{

/***/ "(app-pages-browser)/./lib/indicators.ts":
/*!***************************!*\
  !*** ./lib/indicators.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateDeMarkPivots: () => (/* binding */ calculateDeMarkPivots),\n/* harmony export */   calculateEMA: () => (/* binding */ calculateEMA),\n/* harmony export */   calculateEMACloud: () => (/* binding */ calculateEMACloud),\n/* harmony export */   calculatePivots: () => (/* binding */ calculatePivots),\n/* harmony export */   calculateTimeBasedPivots: () => (/* binding */ calculateTimeBasedPivots),\n/* harmony export */   getTrendStatus: () => (/* binding */ getTrendStatus)\n/* harmony export */ });\nfunction calculateDeMarkPivots(prices) {\n    if (!prices || prices.length === 0) {\n        return {\n            x: 0,\n            r1: 0,\n            pp: 0,\n            s1: 0\n        };\n    }\n    const price = prices[0];\n    const close = price.close;\n    const high = price.high;\n    const low = price.low;\n    // Calculate X based on DeMark's conditions\n    let x;\n    if (close < price.open) {\n        x = high + 2 * low + close;\n    } else if (close > price.open) {\n        x = 2 * high + low + close;\n    } else {\n        x = high + low + 2 * close;\n    }\n    // Calculate pivot points\n    const pp = x / 4;\n    const r1 = x / 2 - low;\n    const s1 = x / 2 - high;\n    return {\n        x: Number(x.toFixed(2)),\n        r1: Number(r1.toFixed(2)),\n        pp: Number(pp.toFixed(2)),\n        s1: Number(s1.toFixed(2))\n    };\n}\nfunction calculateEMA(prices, period) {\n    if (!prices.length || period <= 0) return [];\n    // Calculate SMA for initial EMA value\n    let sma = 0;\n    for(let i = 0; i < period && i < prices.length; i++){\n        sma += prices[i];\n    }\n    sma = sma / period;\n    const k = 2 / (period + 1);\n    const emaData = [];\n    let ema = sma;\n    // Fill initial values with SMA\n    for(let i = 0; i < period - 1 && i < prices.length; i++){\n        emaData.push(sma);\n    }\n    // Calculate EMA values\n    for(let i = period - 1; i < prices.length; i++){\n        ema = prices[i] * k + ema * (1 - k);\n        emaData.push(Number(ema.toFixed(2)));\n    }\n    return emaData;\n}\nfunction calculateEMACloud(prices, fastPeriod, slowPeriod) {\n    // Sort prices chronologically\n    const sortedPrices = [\n        ...prices\n    ].sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n    const closePrices = sortedPrices.map((p)=>p.close);\n    const dates = sortedPrices.map((p)=>p.date);\n    const fastEMA = calculateEMA(closePrices, fastPeriod);\n    const slowEMA = calculateEMA(closePrices, slowPeriod);\n    // Find crossovers\n    const crossovers = [];\n    for(let i = 1; i < prices.length; i++){\n        const prevFast = fastEMA[i - 1];\n        const prevSlow = slowEMA[i - 1];\n        const currFast = fastEMA[i];\n        const currSlow = slowEMA[i];\n        if (prevFast <= prevSlow && currFast > currSlow) {\n            crossovers.push({\n                date: dates[i],\n                type: 'bullish'\n            });\n        } else if (prevFast >= prevSlow && currFast < currSlow) {\n            crossovers.push({\n                date: dates[i],\n                type: 'bearish'\n            });\n        }\n    }\n    return {\n        fast: fastEMA,\n        slow: slowEMA,\n        dates,\n        crossovers\n    };\n}\nfunction calculateTimeBasedPivots(prices, timeframe) {\n    let pivotType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'standard';\n    if (!prices || prices.length === 0) {\n        return {\n            r3: 0,\n            r2: 0,\n            r1: 0,\n            pp: 0,\n            s1: 0,\n            s2: 0,\n            s3: 0\n        };\n    }\n    // Bestimme den relevanten Datensatz basierend auf dem Timeframe\n    let relevantPrices = prices;\n    if (timeframe === 'weekly' && prices.length >= 5) {\n        relevantPrices = prices.slice(-5);\n    } else if (timeframe === 'monthly' && prices.length >= 20) {\n        relevantPrices = prices.slice(-20);\n    } else if (timeframe === 'quarterly' && prices.length >= 60) {\n        relevantPrices = prices.slice(-60);\n    } else if (timeframe === 'yearly' && prices.length >= 250) {\n        relevantPrices = prices.slice(-250);\n    }\n    if (!relevantPrices || relevantPrices.length === 0) {\n        return {\n            r3: 0,\n            r2: 0,\n            r1: 0,\n            pp: 0,\n            s1: 0,\n            s2: 0,\n            s3: 0\n        };\n    }\n    // Calculate period high and low\n    let periodHigh = relevantPrices[0].high;\n    let periodLow = relevantPrices[0].low;\n    let periodClose = relevantPrices[0].close;\n    // For timeframes longer than daily, find the period's high and low\n    if (timeframe !== 'daily' && relevantPrices.length > 1) {\n        periodHigh = Math.max(...relevantPrices.map((p)=>p.high));\n        periodLow = Math.min(...relevantPrices.map((p)=>p.low));\n        // Use the most recent close for the period\n        periodClose = relevantPrices[0].close;\n    }\n    // Standard Floor Trader's Method\n    const pp = (periodHigh + periodLow + periodClose) / 3;\n    if (pivotType === 'standard') {\n        // Standard Pivot Points\n        const r1 = 2 * pp - periodLow;\n        const s1 = 2 * pp - periodHigh;\n        const r2 = pp + (periodHigh - periodLow);\n        const s2 = pp - (periodHigh - periodLow);\n        const r3 = periodHigh + 2 * (pp - periodLow);\n        const s3 = periodLow - 2 * (periodHigh - pp);\n        return {\n            r3: Number(r3.toFixed(2)),\n            r2: Number(r2.toFixed(2)),\n            r1: Number(r1.toFixed(2)),\n            pp: Number(pp.toFixed(2)),\n            s1: Number(s1.toFixed(2)),\n            s2: Number(s2.toFixed(2)),\n            s3: Number(s3.toFixed(2))\n        };\n    } else if (pivotType === 'demark') {\n        // DeMark Pivot Points\n        let x = 0;\n        // Use the first price in the relevant prices for open price\n        const periodOpen = relevantPrices[0].open;\n        if (periodClose < periodOpen) {\n            x = periodHigh + 2 * periodLow + periodClose;\n        } else if (periodClose > periodOpen) {\n            x = 2 * periodHigh + periodLow + periodClose;\n        } else {\n            x = periodHigh + periodLow + 2 * periodClose;\n        }\n        const demarkPP = x / 4;\n        const r1 = x / 2 - periodLow;\n        const s1 = x / 2 - periodHigh;\n        return {\n            x: Number(x.toFixed(2)),\n            r1: Number(r1.toFixed(2)),\n            pp: Number(demarkPP.toFixed(2)),\n            s1: Number(s1.toFixed(2))\n        };\n    }\n    // Default return for type safety\n    return {\n        r3: 0,\n        r2: 0,\n        r1: 0,\n        pp: 0,\n        s1: 0,\n        s2: 0,\n        s3: 0\n    };\n}\n// Legacy-Funktion für Kompatibilität\nfunction calculatePivots(prices) {\n    const levels = calculateTimeBasedPivots(prices, 'daily');\n    return levels;\n}\nfunction getTrendStatus(cloud5_12, cloud34_50) {\n    const latest5_12 = {\n        fast: cloud5_12.fast[cloud5_12.fast.length - 1],\n        slow: cloud5_12.slow[cloud5_12.slow.length - 1]\n    };\n    const latest34_50 = {\n        fast: cloud34_50.fast[cloud34_50.fast.length - 1],\n        slow: cloud34_50.slow[cloud34_50.slow.length - 1]\n    };\n    // Get the latest prices and indicators\n    const prices = cloud5_12.fast;\n    const latestPrice = prices[prices.length - 1];\n    const previousPrice = prices[prices.length - 2];\n    // Primary Trend based on 34-50 zone\n    const aboveLongTermZone = latestPrice > latest34_50.slow;\n    const belowLongTermZone = latestPrice < latest34_50.slow;\n    // Short-term confirmation using 5-12 zone\n    const shortTermBullish = latest5_12.fast > latest5_12.slow;\n    const shortTermBearish = latest5_12.fast < latest5_12.slow;\n    // Intraday Trend\n    let intradayTrend = 'neutral';\n    if (shortTermBullish && latestPrice > previousPrice) {\n        intradayTrend = 'bullish';\n    } else if (shortTermBearish && latestPrice < previousPrice) {\n        intradayTrend = 'bearish';\n    }\n    // Swing Trend\n    let swingTrend = 'neutral';\n    if (aboveLongTermZone) {\n        swingTrend = 'bullish';\n    } else if (belowLongTermZone) {\n        swingTrend = 'bearish';\n    }\n    // Position Trend (Overall)\n    let positionTrend = 'neutral';\n    if (aboveLongTermZone && shortTermBullish) {\n        positionTrend = 'bullish';\n    } else if (belowLongTermZone && shortTermBearish) {\n        positionTrend = 'bearish';\n    }\n    // Calculate trend strength based on distance from zone boundaries\n    const shortTermStrength = Math.abs((latestPrice - latest5_12.slow) / latest5_12.slow * 100);\n    const longTermStrength = Math.abs((latestPrice - latest34_50.slow) / latest34_50.slow * 100);\n    const strength = Math.min(100, Math.round((shortTermStrength + longTermStrength) * 2));\n    return {\n        intradayTrend,\n        swingTrend,\n        positionTrend,\n        strength\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/indicators.ts\n"));

/***/ })

});